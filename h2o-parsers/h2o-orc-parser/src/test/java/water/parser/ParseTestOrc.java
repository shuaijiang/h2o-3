package water.parser;


import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hive.ql.io.orc.OrcFile;
import org.apache.hadoop.hive.ql.io.orc.Reader;
import org.apache.hadoop.hive.serde2.objectinspector.StructField;
import org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;
import org.junit.BeforeClass;
import org.junit.Test;
import water.TestUtil;
import water.fvec.Frame;
import water.util.Log;

import java.io.File;
import java.io.IOException;
import java.util.List;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

/**
 * Test suite for orc parser.
 *
 * This test will build a H2O frame for all orc files found in smalldata/parser/orc directory
 * and compare the H2O frame content with the orc file content read with Core Java commands.
 * Test is declared a success if the content of H2O frame is the same as the contents read
 * by using core Java commands off the Orc file itself.  No multi-threading is used in reading
 * off the Orc file using core Java commands.
 */
public class ParseTestOrc extends TestUtil {

  private static double EPSILON = 1e-9;

  // list all orc files in smalldata/parser/orc directory
  private String[] allOrcFiles = {"smalldata/parser/orc/TestOrcFile.columnProjection.orc",
          "smalldata/parser/orc/bigint_single_col.orc",
          "smalldata/parser/orc/TestOrcFile.emptyFile.orc",
          "smalldata/parser/orc/bool_single_col.orc",
          "smalldata/parser/orc/TestOrcFile.metaData.orc",
          "smalldata/parser/orc/decimal.orc",
          "smalldata/parser/orc/TestOrcFile.test1.orc",
          "smalldata/parser/orc/demo-11-zlib.orc",
          "smalldata/parser/orc/TestOrcFile.testDate1900.orc",
          "smalldata/parser/orc/demo-12-zlib.orc",
          "smalldata/parser/orc/TestOrcFile.testDate2038.orc",
          "smalldata/parser/orc/double_single_col.orc",
          "smalldata/parser/orc/TestOrcFile.testMemoryManagementV11.orc",
          "smalldata/parser/orc/float_single_col.orc",
          "smalldata/parser/orc/TestOrcFile.testMemoryManagementV12.orc",
          "smalldata/parser/orc/int_single_col.orc",
          "smalldata/parser/orc/TestOrcFile.testPredicatePushdown.orc",
          "smalldata/parser/orc/nulls-at-end-snappy.orc",
          "smalldata/parser/orc/TestOrcFile.testSeek.orc",
          "smalldata/parser/orc/orc-file-11-format.orc",
          "smalldata/parser/orc/TestOrcFile.testSnappy.orc",
          "smalldata/parser/orc/orc_split_elim.orc",
          "smalldata/parser/orc/TestOrcFile.testStringAndBinaryStatistics.orc",
          "smalldata/parser/orc/over1k_bloom.orc",
          "smalldata/parser/orc/TestOrcFile.testStripeLevelStats.orc",
          "smalldata/parser/orc/smallint_single_col.orc",
          "smalldata/parser/orc/TestOrcFile.testTimestamp.orc",
          "smalldata/parser/orc/string_single_col.orc",
          "smalldata/parser/orc/TestOrcFile.testUnionAndTimestamp.orc",
          "smalldata/parser/orc/tinyint_single_col.orc",
          "smalldata/parser/orc/TestOrcFile.testWithoutIndex.orc",
          "smalldata/parser/orc/version1999.orc"};

  @BeforeClass
  static public void setup() { TestUtil.stall_till_cloudsize(1); }

  @Test
  public void testParseAllOrcs() {

    int numOfOrcFiles = allOrcFiles.length; // number of Orc Files to test

    for (int fIndex = 0; fIndex < numOfOrcFiles; fIndex++)
    {
      String fileName = allOrcFiles[fIndex];
      File f = find_test_file_static(fileName);

      if (f != null && f.exists()) {
        Configuration conf = new Configuration();
        Path p = new Path(f.toString());
        try {
          Reader orcFileReader = OrcFile.createReader(p, OrcFile.readerOptions(conf));     // orc reader
          Frame h2oFrame = parse_test_file(fileName);     // read one orc file and build a H2O frame
          compareH2OFrame(h2oFrame, orcFileReader);
        } catch (IOException e) {
          e.printStackTrace();
        }

      } else {
        Log.warn("The following file was not found: " + fileName);
      }
    }
  }

  /**
   * This method will take one H2O frame generated by the Orc parser and the fileName of the Orc file
   * and attempt to compare the content of the Orc file to the H2O frame.  In particular, the following
   * are compared:
   * - column names;
   * - number of columns and rows;
   * - content of each row.
   *
   * If all comparison pass, the test will pass.  Otherwise, the test will fail.
   *
   * @param h2oFrame
   * @param orcReader
     */
  private static void compareH2OFrame(Frame h2oFrame, Reader orcReader) {
    // grab column names, column and row numbers
    StructObjectInspector insp = (StructObjectInspector) orcReader.getObjectInspector();
    List<StructField> allColInfo = (List<StructField>) insp.getAllStructFieldRefs();    // get info of all cols

    // compare number of columns and rows
    int colNumber = allColInfo.size();    // get and check column number
    assertEquals("Number of columns need to be the same: ", colNumber, h2oFrame.numCols());

    Long totalRowNumber = orcReader.getNumberOfRows();    // get and check row number
    assertEquals("Number of rows need to be the same: ", totalRowNumber, (Long) h2oFrame.numRows());

    // compare column names
    String[] colNames = new String[colNumber];
    String[] colTypes = new String[colNumber];
    for (int index = 0; index < colNumber; index++) {   // get and check column names
      colNames[index] = allColInfo.get(index).getFieldName();
      colTypes[index] = allColInfo.get(index).getFieldObjectInspector().getTypeName();
    }
    assertArrayEquals("Column names need to be the same: ", colNames, h2oFrame._names);

    // compare one column at a time of the whole row?

  }

}